<Query Kind="Statements" />

var data = new List<string>();
//data.Add("#################################################################################");
//data.Add("#.................#...#.#...............#...#.........#.......#.......#.....#...#");
//data.Add("#######.#.#######.#.#.#.#.#######.#######.#.#.###.#####.#####.#.#.###C###.#.#.#.#");
//data.Add("#.E...#.#.#.....#...#...#.#.....#.......#.#.#t#.#.....#.#...#...#.#.#.#...#.#.#.#");
//data.Add("#.###.###.#.###.#######.#.#.###.#######.#.###.#.#####.#.#.#.#####.#.#.#.###.#.#.#");
//data.Add("#.#.......#...#...#...#.#.#.#.......#...#.#.........#...#.#.....#f#.....#...#a#.#");
//data.Add("#.#########.#.#####.#.#.#.###.#####.#.###.#.#######.#####.#.###.#.#######.###.###");
//data.Add("#...#.....#.#.....#.#...#...#.#.....#...#...#...#.#.....#.#...#.#...#h..#...#...#");
//data.Add("#.#.#.###.#####.#.#.#######.#.#.#######.#.###.#.#.#####.###.#.#####.#.#.###.###.#");
//data.Add("#.#.#...#.....#.#...#...#...#.#...#...#.#...#.#.#.....#...#.#.#.....#.#...#.L.#.#");
//data.Add("###.#.#######.#.#####.#.#.###.###.###.#.#####.#.#.###.###.###.#.#####.###.###.#.#");
//data.Add("#...#.#...#...#...#...#.#...#...#.....#.#...#.#.#...#.........#.#.......#...#...#");
//data.Add("#.###.#.#.#.#####.#.###.###.#.#.#####.#.#.#.#.#.###.###########.#.#####.###.###.#");
//data.Add("#.....#.#...#.....#...#...#.#.#.#.....#.#.#...#.#.....#.....#...#...#.#.#...#...#");
//data.Add("#.#####.###.#####.###.###.#.###.#.#####.#.#####.#.#####.###.#.#####.#.#.###.#.###");
//data.Add("#...#.#...#.#...#.#...#.#.#.#...#.....#.#.#.....#.#.....#...#...#.#.#.#...#.#...#");
//data.Add("###.#.###.###.#.###.###.#.#.#.#.#######.#.#.#######.#####.#####.#.#.#.###.#####.#");
//data.Add("#.#.....#.....#.....#...#.#...#.#.......#.#.......#...#.#.#.....#.#.#...#.......#");
//data.Add("#.#####.#############.#.#.#.#####.#####.#.#######.###.#.#.###.###.#.#.###########");
//data.Add("#.....#.#.#...........#.#...#.....#.....#.#...#...#...#.#.....#...#.#...........#");
//data.Add("#.#.###.#.#.#.#####.#########.#####.#####.#.#.#.###.###.#.#####.#.#.###.#########");
//data.Add("#.#.#...#...#.....#.#.......#.#.........#...#.#.....#.....#.X.#.#.#...#.#...#...#");
//data.Add("###.#.###########.#########.#.#########.#.###.#######.#####.###.#####D#.#.#.#.#.#");
//data.Add("#...#.#...........#.......#.#.....#.....#...#...#...#...#.#...#.......#...#...#.#");
//data.Add("#.#.#.###.#######.#.#.#.###.#.###.#####.#.#####.###.###.#.###.#######.###.#####.#");
//data.Add("#.#.#....k#...#...#.#.#.#...#...#.....#.#.#.....#.....#.#...#.#...V.#...#...#...#");
//data.Add("#.#.#########.#.###.#.#.#.#####.#####.###.#.#####.#####.###.#.#.###.###.###.#.###");
//data.Add("#.#...#.......#.#...#.#.#...#.......#...#.#.#.....#.....#...#...#...#.#.#.#.#...#");
//data.Add("#.###.#.#######.#.###.#####.#.#########.#.#.###.#.#.#####.#######.###.#.#.#.###.#");
//data.Add("#...#...#.......#.#.#.....#.#.#.#.......#.#.#...#.#.#.#...#.......#...R.#...#...#");
//data.Add("#.#.#####.#######.#.#####.#.#.#.#.#####.###.#.#####.#.#.#.#W#######.#####S###.#.#");
//data.Add("#.#......j#...#...#...I.#...#...#.#.....#...#.......#...#.#.#.....#...#.#.#.#.#.#");
//data.Add("#.#########.###.###.###.#########.#####.#.#######.#######.#.#.###.###.#.#.#.#.#.#");
//data.Add("#.......#.....#.....#.#.#...#.....#...#.#.......#.........#...#.#.#.#.#.#.#.#.#.#");
//data.Add("#######.###.#.#######U#.#.#.#.#####.#.#########.###.###########.#.#.#.#.#.#.#.###");
//data.Add("#...Y.#...#.#.........#...#.#.......#...#.#...#.#...#.............#.#.#.....#...#");
//data.Add("#.#######.#.###.#####.#####.#########.#.#.#.#.#.#####.#############.#.#########B#");
//data.Add("#...#.Q...#.#...#.#...#...#.#...#...#.#.#...#.#.......#i..#.....#...#.........#.#");
//data.Add("#.#.#.#######.###.#.#####.#.#.#.#.#.###.#.###.#########.#.#.#.###.#.#########.#.#");
//data.Add("#.#...........#p..........#...#...#.........#...........#...#.....#...N.........#");
//data.Add("#######################################.@.#######################################");
//data.Add("#.#.....#.#.........#.........#.....#.......#...#.......#...#.....#...G.....#...#");
//data.Add("#.#.#.#.#.#.#####.#.#######.#.#.###.#.###.#.#.#.#.#####.#.###.###.#.#####.#.#.#.#");
//data.Add("#...#r#.#.#.#...#n#.........#...#.#.#...#.#.#.#.#...#...#...#.#.#...#...#.#...#.#");
//data.Add("#.###.#.#.#.#.###.###############.#.###.#.#.#.#.#.#.#.#####.#.#.#######.#.#####.#");
//data.Add("#.#d#.#.#.....#...#.........#.....#.....#.#..m#.#.#.#.....#.#.#.....#...#...#...#");
//data.Add("#.#.#.#.#######.#########.###.#.#######.#.#####.#.#.#####.#.#.###.#.#.#####.#.###");
//data.Add("#...#.#.#..b....#.....#...#...#.#.....#.#.#...#.#.#.#.......#.....#...#.....#...#");
//data.Add("#.###.#.#.#######.###.#.###.###.#.###.#.#.#.#.#.#.#.#################.#.#######.#");
//data.Add("#.#...#...#.......#...#.#...#.#...#.#...#.#.#.#.#.#.#.....#.......#...#...#.K.#.#");
//data.Add("###.#######.###.###.###.#.###.#####.#####.#.#.#.#.#.#.###.#.#####.#.#####.#.#.#.#");
//data.Add("#...#.......#.#...#.....#...#.......#...#.#.#...#.#.#.#.#...#...#.....#...#.#.#.#");
//data.Add("#.#####.#####.###.#####.###.###.#.#.###.#.###.#####.#.#.#####.#########.###.###.#");
//data.Add("#.#...#..z#.....#...#.#.#.#...#.#.#.....#...#.#.....#.....#...#.........#.....#.#");
//data.Add("#.#.#.###.###.#.###.#.#.#.###.###.#####.###.#.#.#.#######.###.#.#########.###.#.#");
//data.Add("#.#.#..s#.....#.#...#.......#...#.#.#...#...#...#.#.....#.....#...#.#.....#.#.#.#");
//data.Add("#.#.###.#######.#.#############.#.#.#.###.#########.#.#######.###.#.#.#####.#.#.#");
//data.Add("#.....#.#.....#.#.............#...#...#.#.M...#.....#...#...#.#...#...#.....#...#");
//data.Add("#######.#.###.#######.#####.#.#####.###.#####.#.#######.#.#.#.#.#####.###.#.#####");
//data.Add("#...#...#.#.#.......#.....#.#...#...#...#.....#.#.....#.#.#...#.....#.....#...#.#");
//data.Add("#O###.###.#.#######.###.###.#####.#####.#.#####.#.###.#.#.#####.###.#########.#.#");
//data.Add("#...#.....#.....#...#.#.#...#.....#.....#.....#...#.#.#.#...#.#...#......o#...#.#");
//data.Add("###.#########.#.#.#.#.#.#.#.#.#######.#.#####.#####.#.#.###.#.###.#######.#.###J#");
//data.Add("#...#.........#.#.#.#.#.#.#.#.#.......#.#.......#.....#.#...#..x#.#.....#.#.....#");
//data.Add("#.#.#.#########.#.###.#.#.###.###.#.#####.#####.#.#####.#.#####.#.#.#####.#.#####");
//data.Add("#.#...#....g#.#.#.....#.#...#...#.#.....#.....#.#.#...#.....#...#...#.....#.#...#");
//data.Add("#.###.#.###.#.#.###########.###.#######.#.###.###.#.#######.#.#####.#.###.###.#.#");
//data.Add("#.#.#.#...#.#.................#.#...#...#.#.#.....#.#....v#.#.#.....#.#.#.#...#.#");
//data.Add("#.#.#.###.#.###########.#####.#.#.#.#.#.#.#.#######.#.###.###.#.#####.#.#.#.###.#");
//data.Add("#.#.#...#.#...F...#.....#...#.#.#.#...#.#.#.....#...#...#.....#.....#.#...#q#.#.#");
//data.Add("#.#.###.#.#######.#.#####.#.###.#.#######.###.#.#.#.###.###########.#.#####.#.#.#");
//data.Add("#.#...#.#.#...#...#.#...#.#.....#.......#.....#...#.#.#w#.........#.#.....#.#.#.#");
//data.Add("#.#.#.#.#.#.#.#.#.###.#.#.#########.###.###########.#.#.#.#.#####.#######.#.#.#.#");
//data.Add("#.#.#...#.#.#...#.#...#.#...#.....#...#.#...#.......#.#.#.#.#...#.P.#...#.#...#y#");
//data.Add("#.#######.#.#.#####.###.###.#.###.#####.#.###.#######.#.###.#.#.###.#.#.#.#.###.#");
//data.Add("#.#.....#.#c#.#...#.#l..#...#...#.#.A.#.#.....#.......#...Z.#.#...#.#.#.#...#...#");
//data.Add("#.#.###T#.#.###.#.#.#.###.###.#.#.#.#.#.#.#########.#.###########.#.#.#.#####.###");
//data.Add("#.#...#.#.#.....#...#...#.H.#.#.#.#.#...#...#.......#.....#.......#...#.....#..u#");
//data.Add("#.###.#.#.#############.###.###.#.#.###.###.###.#########.###.###.#########.###.#");
//data.Add("#.....#..........e....#.........#...#...#.......#.............#...........#.....#");
//data.Add("#################################################################################");

data.Add("#########");
data.Add("#b.A.@.a#");
data.Add("#########");

var xval = 0;
var yval = 0;
var directions = new int[4] { 0, 1, 2, 3 };
var kdCount = 0;

for (var i = 0; i < data.Count; i++)
{
	for (var j = 0; j < data[0].Length; j++)
	{
		if (data[i][j] == '@')
		{
			xval = i;
			yval = j;
		}
		if (data[i][j] != '#' && data[i][j] != '.' && data[i][j] != '@') {kdCount++;}
	}
}
//kdCount.Dump();//3
//xval.Dump(); //5
//yval.Dump(); //1

void Move(int count, int y, int x, List<string> alreadyTraversed, List<char> keys, List<char> doors)
{
	count.Dump();
	data[y][x].Dump();
	var instCount = count + 1;
	var already = new List<string>(alreadyTraversed);
	already.Add($"{y},{x}");
	var addedKey = new List<char>(keys);
	var addedDoor = new List<char>(doors);
	for (var i = 0; i < 4; i++)
	{
		switch (directions[i])
		{
			case 0:
				if (data[y + 1][x] == '#' || alreadyTraversed.Contains($"{y + 1},{x}"))
				{
					break;
				}
				if (Char.IsUpper(data[y + 1][x]) && !addedKey.Contains(Char.ToLower(data[y + 1][x])))
				{
					break;
				}
				if(Char.IsLower(data[y + 1][x]))
				{
					addedKey.Add(data[y + 1][x]);
					if(kdCount == addedKey.Count + addedDoor.Count)
					{
						count.Dump();
						Console.ReadLine();
					}
					already = new List<string>();
				}
				Move(instCount, y + 1, x, already, addedKey, addedDoor);
				break;
			case 1:
				if (data[y][x + 1] == '#' || alreadyTraversed.Contains($"{y},{x + 1}"))
				{
					break;
				}
				if (Char.IsUpper(data[y][x + 1]) && !addedKey.Contains(Char.ToLower(data[y][x + 1])))
				{
					break;
				}
				if (Char.IsLower(data[y][x + 1]))
				{
					addedKey.Add(data[y][x + 1]);
					if (kdCount == addedKey.Count + addedDoor.Count)
					{
						count.Dump();
						Console.ReadLine();
					}
					already = new List<string>();
				}
				Move(instCount, y, x + 1, already, addedKey, addedDoor);
				break;
			case 2:
				if (data[y - 1][x] == '#' || alreadyTraversed.Contains($"{y - 1},{x}"))
				{
					break;
				}
				if (Char.IsUpper(data[y - 1][x]) && !addedKey.Contains(Char.ToLower(data[y - 1][x])))
				{
					break;
				}
				if (Char.IsLower(data[y - 1][x]))
				{
					addedKey.Add(data[y - 1][x]);
					if (kdCount == addedKey.Count + addedDoor.Count)
					{
						count.Dump();
						Console.ReadLine();
					}
					already = new List<string>();
				}
				Move(instCount, y - 1, x, already, addedKey, addedDoor);
				break;
			case 3:
				if (data[y][x - 1] == '#' || alreadyTraversed.Contains($"{y},{x - 1}"))
				{
					break;
				}
				if (Char.IsUpper(data[y][x - 1]) && !addedKey.Contains(Char.ToLower(data[y][x - 1])))
				{
					break;
				}
				if (Char.IsLower(data[y][x -1]))
				{
					addedKey.Add(data[y][x - 1]);
					if (kdCount == addedKey.Count + addedDoor.Count)
					{
						count.Dump();
						Console.ReadLine();
					}
					already = new List<string>();
				}
				Move(instCount, y, x -1, already, addedKey, addedDoor);
				break;
		}
	}
	return;
}

Move(0, xval, yval, new List<string>(){}, new List<char>(), new List<char>());
